/*! For license information please see nav-menu.min.js.LICENSE.txt */
(()=>{"use strict";var __webpack_modules__={"./Assets/js/src/nav-menu.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("{__webpack_require__.r(__webpack_exports__);\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t.return && (u = t.return(), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\n/**\r\n * Handles the options in the language switcher nav menu metabox.\r\n *\r\n * @package Linguator\r\n */\n\nvar lmatNavMenu = {\n  /**\r\n   * The element wrapping the menu elements.\r\n   *\r\n   * @member {HTMLElement|null}\r\n   */\n  wrapper: null,\n  /**\r\n   * Init.\r\n   */\n  init: function init() {\n    if (document.readyState !== 'loading') {\n      lmatNavMenu.ready();\n    } else {\n      document.addEventListener('DOMContentLoaded', lmatNavMenu.ready);\n    }\n  },\n  /**\r\n   * Called when the DOM is ready. Attaches the events to the wrapper.\r\n   */\n  ready: function ready() {\n    lmatNavMenu.wrapper = document.getElementById('menu-to-edit');\n    if (!lmatNavMenu.wrapper) {\n      return;\n    }\n    lmatNavMenu.wrapper.addEventListener('click', lmatNavMenu.printMetabox);\n    lmatNavMenu.wrapper.addEventListener('change', lmatNavMenu.ensureContent);\n    lmatNavMenu.wrapper.addEventListener('change', lmatNavMenu.showHideRows);\n  },\n  printMetabox: {\n    /**\r\n     * Event callback that prints our checkboxes in the language switcher.\r\n     *\r\n     * @param {Event} event The event.\r\n     */\n    handleEvent: function handleEvent(event) {\n      if (!event.target.classList.contains('item-edit')) {\n        // Not clicking on a Edit arrow button.\n        return;\n      }\n      var metabox = event.target.closest('.menu-item').querySelector('.menu-item-settings');\n      if (!(metabox !== null && metabox !== void 0 && metabox.id)) {\n        // Should not happen.\n        return;\n      }\n      if (!metabox.querySelectorAll('input[value=\"#lmat_switcher\"][type=text]').length) {\n        // Not our metabox, or already replaced.\n        return;\n      }\n\n      // Remove default fields we don't need.\n      _toConsumableArray(metabox.children).forEach(function (el) {\n        if ('P' === el.nodeName && !el.classList.contains('field-move')) {\n          el.remove();\n        }\n      });\n      var t = lmatNavMenu.printMetabox;\n      var itemId = Number(metabox.id.replace('menu-item-settings-', ''));\n      metabox.append(t.createHiddenInput('title', itemId, lmat_data.title)); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.append\n      metabox.append(t.createHiddenInput('url', itemId, '#lmat_switcher')); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.append\n      metabox.append(t.createHiddenInput('lmat-detect', itemId, 1)); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.append\n\n      var ids = Array('hide_if_no_translation', 'hide_current', 'force_home', 'show_flags', 'show_names', 'dropdown'); // Reverse order.\n      var isValDefined = typeof lmat_data.val[itemId] !== 'undefined';\n      ids.forEach(function (optionName) {\n        // Create the checkbox's wrapper.\n        var inputWrapper = t.createElement('p', {\n          class: 'description'\n        });\n        if ('hide_current' === optionName && isValDefined && 1 === lmat_data.val[itemId].dropdown) {\n          // Hide the `hide_current` checkbox if `dropdown` is checked.\n          inputWrapper.classList.add('hidden');\n        }\n        metabox.prepend(inputWrapper); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.prepend\n\n        // Create the checkbox's label.\n        var inputId = \"edit-menu-item-\".concat(optionName, \"-\").concat(itemId);\n        var label = t.createElement('label', {\n          'for': inputId\n        });\n        label.innerText = \" \".concat(lmat_data.strings[optionName]);\n        inputWrapper.append(label); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.append\n\n        // Create the checkbox.\n        var cb = t.createElement('input', {\n          type: 'checkbox',\n          id: inputId,\n          name: \"menu-item-\".concat(optionName, \"[\").concat(itemId, \"]\"),\n          value: 1\n        });\n        if (isValDefined && 1 === lmat_data.val[itemId][optionName] || !isValDefined && 'show_names' === optionName) {\n          // `show_names` as default value.\n          cb.checked = true;\n        }\n        label.prepend(cb); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.prepend\n      });\n    },\n    /**\r\n     * Creates and returns a `<input type=hidden\"/>` element.\r\n     *\r\n     * @param {string}        id     An identifier for this input. It will be part of the final `id` attribute.\r\n     * @param {number}        itemId The ID of the menu element (post ID).\r\n     * @param {string|number} value  The input's value.\r\n     * @return {HTMLElement} The input element.\r\n     */\n    createHiddenInput: function createHiddenInput(id, itemId, value) {\n      return lmatNavMenu.printMetabox.createElement('input', {\n        type: 'hidden',\n        id: \"edit-menu-item-\".concat(id, \"-\").concat(itemId),\n        name: \"menu-item-\".concat(id, \"[\").concat(itemId, \"]\"),\n        value: value\n      });\n    },\n    /**\r\n     * Creates and returns an element.\r\n     *\r\n     * @param {string} type Element's type.\r\n     * @param {Object} atts Element's attributes.\r\n     * @return {HTMLElement} The element.\r\n     */\n    createElement: function createElement(type, atts) {\n      var el = document.createElement(type);\n      for (var _i = 0, _Object$entries = Object.entries(atts); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          key = _Object$entries$_i[0],\n          value = _Object$entries$_i[1];\n        el.setAttribute(key, value);\n      }\n      return el;\n    }\n  },\n  ensureContent: {\n    regExpr: new RegExp(/^edit-menu-item-show_(names|flags)-(\\d+)$/),\n    /**\r\n     * Event callback that disallows unchecking both `show_names` and `show_flags`.\r\n     *\r\n     * @param {Event} event The event.\r\n     */\n    handleEvent: function handleEvent(event) {\n      if (!event.target.id || event.target.checked) {\n        // Now checked, nothing to do.\n        return;\n      }\n      var matches = event.target.id.match(lmatNavMenu.ensureContent.regExpr);\n      if (!matches) {\n        // Not the checkbox we want.\n        return;\n      }\n\n      // Check the other checkbox.\n      var _matches = _slicedToArray(matches, 3),\n        type = _matches[1],\n        id = _matches[2];\n      var otherType = 'names' === type ? 'flags' : 'names';\n      document.getElementById(\"edit-menu-item-show_\".concat(otherType, \"-\").concat(id)).checked = true;\n    }\n  },\n  showHideRows: {\n    regExpr: new RegExp(/^edit-menu-item-dropdown-(\\d+)$/),\n    /**\r\n     * Event callback that shows or hides the `hide_current` checkbox when `dropdown` is checked.\r\n     *\r\n     * @param {Event} event The event.\r\n     */\n    handleEvent: function handleEvent(event) {\n      if (!event.target.id) {\n        // Not the checkbox we want.\n        return;\n      }\n      var matches = event.target.id.match(lmatNavMenu.showHideRows.regExpr);\n      if (!matches) {\n        // Not the checkbox we want.\n        return;\n      }\n      var hideCb = document.getElementById(\"edit-menu-item-hide_current-\".concat(matches[1]));\n      if (!hideCb) {\n        // Should not happen.\n        return;\n      }\n      var description = hideCb.closest('.description');\n\n      // Hide or show.\n      description.classList.toggle('hidden', event.target.checked);\n      if (event.target.checked) {\n        // Uncheck after hiding.\n        hideCb.checked = false;\n        hideCb.dispatchEvent(new Event('change'));\n      }\n    }\n  }\n};\nlmatNavMenu.init();\n\n//# sourceURL=webpack://linguator-multilingual-ai-translation/./Assets/js/src/nav-menu.js?\n}")}},__webpack_require__={r:e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})}},__webpack_exports__={};__webpack_modules__["./Assets/js/src/nav-menu.js"](0,__webpack_exports__,__webpack_require__)})();