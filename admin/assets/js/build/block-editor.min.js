/*! For license information please see block-editor.min.js.LICENSE.txt */
(()=>{"use strict";var __webpack_modules__={"./Assets/js/src/block-editor.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_confirmation_modal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/confirmation-modal.js */ \"./Assets/js/src/lib/confirmation-modal.js\");\n/* harmony import */ var _lib_metabox_autocomplete_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/metabox-autocomplete.js */ \"./Assets/js/src/lib/metabox-autocomplete.js\");\n/* harmony import */ var _lib_filter_path_middleware_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./lib/filter-path-middleware.js */ \"./Assets/js/src/lib/filter-path-middleware.js\");\n/**\r\n * @package Linguator\r\n */\n\n\n\n\n\n/**\r\n * Filter REST API requests to add the language in the request\r\n *\r\n * @since 2.5\r\n */\nwp.apiFetch.use(function (options, next) {\n  /*\r\n   * If options.url is defined, this is not a REST request but a direct call to post.php for legacy metaboxes.\r\n   * If `filteredRoutes` is not defined, return early.\r\n   */\n  if ('undefined' !== typeof options.url || 'undefined' === typeof lmatFilteredRoutes) {\n    return next(options);\n  }\n  return next((0,_lib_filter_path_middleware_js__WEBPACK_IMPORTED_MODULE_2__[\"default\"])(options, lmatFilteredRoutes, addLanguageParameter));\n});\n\n/**\r\n * Gets the language of the currently edited post, fallback to default language if none is found.\r\n *\r\n * @since 2.5\r\n *\r\n * @return {Element.value}\r\n */\nfunction getCurrentLanguage() {\n  var lang = document.querySelector('[name=post_lang_choice]');\n  if (null === lang) {\n    return lmatDefaultLanguage;\n  }\n  return lang.value;\n}\n\n/**\r\n * Adds language parameter according to the current one (query string for GET, body for PUT and POST).\r\n *\r\n * @since 3.5\r\n *\r\n * @param {APIFetchOptions} options\r\n * @returns {APIFetchOptions}\r\n */\nfunction addLanguageParameter(options) {\n  if ('undefined' === typeof options.data || null === options.data) {\n    // GET\n    options.path += (options.path.indexOf('?') >= 0 ? '&lang=' : '?lang=') + getCurrentLanguage();\n  } else {\n    // PUT, POST\n    options.data.lang = getCurrentLanguage();\n  }\n  return options;\n}\n\n/**\r\n * Handles internals of the metabox:\r\n * Language select, autocomplete input field.\r\n *\r\n * @since 1.5\r\n *\r\n * Save post after lang choice is done and redirect to the same page for refreshing all the data.\r\n *\r\n * @since 2.5\r\n *\r\n * Link post saving after refreshing the metabox.\r\n *\r\n * @since 3.0\r\n */\njQuery(function ($) {\n  // Initialize current language to be able to compare if it changes.\n  (0,_lib_confirmation_modal_js__WEBPACK_IMPORTED_MODULE_0__.initializeLanguageOldValue)();\n\n  // Ajax for changing the post's language in the languages metabox\n  $('.post_lang_choice').on('change', function (event) {\n    var _wp$data = wp.data,\n      select = _wp$data.select,\n      dispatch = _wp$data.dispatch,\n      subscribe = _wp$data.subscribe;\n    var emptyPost = isEmptyPost();\n    var addQueryArgs = wp.url.addQueryArgs;\n\n    // Initialize the confirmation dialog box.\n    var confirmationModal = (0,_lib_confirmation_modal_js__WEBPACK_IMPORTED_MODULE_0__.initializeConfirmationModal)();\n    var dialog = confirmationModal.dialogContainer;\n    var dialogResult = confirmationModal.dialogResult;\n    var selectedOption = event.target; // The selected option in the dropdown list.\n\n    // Specific case for empty posts.\n    // Place at the beginning because window.location change triggers automatically page reloading.\n    if (location.pathname.match(/post-new.php/gi) && emptyPost) {\n      reloadPageForEmptyPost(selectedOption.value);\n    }\n\n    // Otherwise send an ajax request to refresh the legacy metabox and set the post language with the new language.\n    // It needs a confirmation of the user before changing the language.\n    // Need to wait the ajax response before triggering the block editor post save action.\n    if ($(this).data('old-value') !== selectedOption.value && !emptyPost) {\n      dialog.dialog('open');\n    } else {\n      // Update the old language with the new one to be able to compare it in the next change.\n      // Because the page isn't reloaded in this case.\n      (0,_lib_confirmation_modal_js__WEBPACK_IMPORTED_MODULE_0__.initializeLanguageOldValue)();\n      dialogResult = Promise.resolve();\n    }\n    dialogResult.then(function () {\n      var data = {\n        // phpcs:ignore PEAR.Functions.FunctionCallSignature.Indent\n        action: 'lmat_post_lang_choice',\n        lang: selectedOption.value,\n        post_type: $('#post_type').val(),\n        post_id: $('#post_ID').val(),\n        _lmat_nonce: $('#_lmat_nonce').val()\n      };\n\n      // Update post language in database as soon as possible.\n      // Because, in addition of the block editor save process, the legacy metabox uses a post.php process to update the language and is too late compared to the page reload.\n      $.post(ajaxurl, data, function () {\n        blockEditorSavePostAndReloadPage();\n      });\n    }, function () {} // Do nothing when promise is rejected by clicking the Cancel dialog button.\n    );\n    function isEmptyPost() {\n      var _editor$getEditedPost, _editor$getEditedPost2;\n      var editor = select('core/editor');\n      return !((_editor$getEditedPost = editor.getEditedPostAttribute('title')) !== null && _editor$getEditedPost !== void 0 && _editor$getEditedPost.trim()) && !editor.getEditedPostContent() && !((_editor$getEditedPost2 = editor.getEditedPostAttribute('excerpt')) !== null && _editor$getEditedPost2 !== void 0 && _editor$getEditedPost2.trim());\n    }\n\n    /**\r\n     * Reload the block editor page for empty posts.\r\n     *\r\n     * @param {string} lang The target language code.\r\n     */\n    function reloadPageForEmptyPost(lang) {\n      // Change the new_lang parameter with the new language value for reloading the page\n      // WPCS location.search is never written in the page, just used to reload page with the right value of new_lang\n      // new_lang input is controlled server side in PHP. The value come from the dropdown list of language returned and escaped server side.\n      // Notice that window.location changing triggers automatically page reloading.\n      if (-1 != location.search.indexOf('new_lang')) {\n        // use regexp non capturing group to replace new_lang parameter no matter where it is and capture other parameters which can be behind it\n        window.location.search = window.location.search.replace(/(?:new_lang=[^&]*)(&)?(.*)/, 'new_lang=' + lang + '$1$2'); // phpcs:ignore WordPressVIPMinimum.JS.Window.location, WordPressVIPMinimum.JS.Window.VarAssignment\n      } else {\n        window.location.search = window.location.search + (-1 != window.location.search.indexOf('?') ? '&' : '?') + 'new_lang=' + lang; // phpcs:ignore WordPressVIPMinimum.JS.Window.location, WordPressVIPMinimum.JS.Window.VarAssignment\n      }\n    }\n    ;\n\n    /**\r\n     * Triggers block editor post save and reload the block editor page when everything is ok.\r\n     */\n    function blockEditorSavePostAndReloadPage() {\n      var unsubscribe = null;\n      var previousPost = select('core/editor').getCurrentPost();\n\n      // Listen if the savePost is completely done by subscribing to its events.\n      var savePostIsDone = new Promise(function (resolve, reject) {\n        unsubscribe = subscribe(function () {\n          var post = select('core/editor').getCurrentPost();\n          var id = post.id,\n            status = post.status,\n            type = post.type;\n          var error = select('core').getLastEntitySaveError('postType', type, id);\n          if (error) {\n            reject();\n          }\n          if (previousPost.modified !== post.modified) {\n            if (location.pathname.match(/post-new.php/gi) && status !== 'auto-draft' && id) {\n              window.history.replaceState({\n                id: id\n              }, 'Post ' + id, addQueryArgs('post.php', {\n                post: id,\n                action: 'edit'\n              }));\n            }\n            resolve();\n          }\n        });\n      });\n\n      // Triggers the post save.\n      dispatch('core/editor').savePost();\n\n      // Process\n      savePostIsDone.then(function () {\n        // If the post is well saved, we can reload the page\n        window.location.reload();\n      }, function () {\n        // If the post save failed\n        unsubscribe();\n      }).catch(function () {\n        // If an exception is thrown\n        unsubscribe();\n      });\n    }\n    ;\n  });\n  (0,_lib_metabox_autocomplete_js__WEBPACK_IMPORTED_MODULE_1__.initMetaboxAutoComplete)();\n});\n\n//# sourceURL=webpack://linguator-multilingual-ai-translation/./Assets/js/src/block-editor.js?\n}")},"./Assets/js/src/lib/confirmation-modal.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initializeConfirmationModal: () => (/* binding */ initializeConfirmationModal),\n/* harmony export */   initializeLanguageOldValue: () => (/* binding */ initializeLanguageOldValue)\n/* harmony export */ });\n/**\r\n * @package Linguator\r\n */\n\nvar languagesList = jQuery('.post_lang_choice');\n\n// Dialog box for alerting the user about a risky changing.\nvar initializeConfirmationModal = function initializeConfirmationModal() {\n  // We can't use underscore or lodash in this common code because it depends of the context classic or block editor.\n  // Classic editor underscore is loaded, Block editor lodash is loaded.\n  var __ = wp.i18n.__;\n\n  // Create dialog container.\n  var dialogContainer = jQuery('<div/>', {\n    id: 'lmat-dialog',\n    style: 'display:none;'\n  }).text(__('Are you sure you want to change the language of the current content?', 'linguator-multilingual-ai-translation'));\n\n  // Put it after languages list dropdown.\n  // PHPCS ignore dialogContainer is a new safe HTML code generated above.\n  languagesList.after(dialogContainer); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.after\n\n  var dialogResult = new Promise(function (confirm, cancel) {\n    var confirmDialog = function confirmDialog(what) {\n      // phpcs:ignore PEAR.Functions.FunctionCallSignature.Indent\n      switch (what) {\n        // phpcs:ignore PEAR.Functions.FunctionCallSignature.Indent\n        case 'yes':\n          // Confirm the new language.\n          languagesList.data('old-value', languagesList.children(':selected').first().val());\n          confirm();\n          break;\n        case 'no':\n          // Revert to the old language.\n          languagesList.val(languagesList.data('old-value'));\n          cancel('Cancel');\n          break;\n      }\n      dialogContainer.dialog('close'); // phpcs:ignore PEAR.Functions.FunctionCallSignature.Indent\n    }; // phpcs:ignore PEAR.Functions.FunctionCallSignature.Indent\n\n    // Initialize dialog box in the case a language is selected but not added in the list.\n    var dialogOptions = {\n      autoOpen: false,\n      modal: true,\n      draggable: false,\n      resizable: false,\n      title: __('Change language', 'linguator-multilingual-ai-translation'),\n      minWidth: 600,\n      maxWidth: '100%',\n      open: function open(event, ui) {\n        // Change dialog box position for rtl language\n        if (jQuery('body').hasClass('rtl')) {\n          jQuery(this).parent().css({\n            right: jQuery(this).parent().css('left'),\n            left: 'auto'\n          });\n        }\n      },\n      close: function close(event, ui) {\n        // When we're closing the dialog box we need to cancel the language change as we click on Cancel button.\n        confirmDialog('no');\n      },\n      buttons: [{\n        text: __('OK', 'linguator-multilingual-ai-translation'),\n        click: function click(event) {\n          confirmDialog('yes');\n        }\n      }, {\n        text: __('Cancel', 'linguator-multilingual-ai-translation'),\n        click: function click(event) {\n          confirmDialog('no');\n        }\n      }]\n    };\n\n    // jQuery UI >= 1.12 is available in WP 6.2+ (our minimum version)\n    Object.assign(dialogOptions, {\n      classes: {\n        'ui-dialog': 'lmat-confirmation-modal'\n      }\n    });\n    dialogContainer.dialog(dialogOptions);\n  });\n  return {\n    dialogContainer: dialogContainer,\n    dialogResult: dialogResult\n  };\n};\nvar initializeLanguageOldValue = function initializeLanguageOldValue() {\n  // Keep the old language value to be able to compare to the new one and revert to it if necessary.\n  languagesList.attr('data-old-value', languagesList.children(':selected').first().val());\n};\n\n//# sourceURL=webpack://linguator-multilingual-ai-translation/./Assets/js/src/lib/confirmation-modal.js?\n}")},"./Assets/js/src/lib/filter-path-middleware.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/**\r\n * @package Linguator\r\n */\n\n/**\r\n * Filters requests for translatable entities.\r\n * This logic is shared across all Linguator plugins.\r\n *\r\n * @since 3.5\r\n *\r\n * @param {APIFetchOptions} options\r\n * @param {Array} filteredRoutes\r\n * @param {CallableFunction} filter\r\n * @returns {APIFetchOptions}\r\n */\nvar filterPathMiddleware = function filterPathMiddleware(options, filteredRoutes, filter) {\n  var cleanPath = options.path.split('?')[0].replace(/^\\/+|\\/+$/g, ''); // Get path without query parameters and trim '/'.\n\n  return Object.values(filteredRoutes).find(function (path) {\n    return cleanPath === path;\n  }) ? filter(options) : options;\n};\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (filterPathMiddleware);\n\n//# sourceURL=webpack://linguator-multilingual-ai-translation/./Assets/js/src/lib/filter-path-middleware.js?\n}")},"./Assets/js/src/lib/metabox-autocomplete.js":(__unused_webpack___webpack_module__,__webpack_exports__,__webpack_require__)=>{eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initMetaboxAutoComplete: () => (/* binding */ initMetaboxAutoComplete)\n/* harmony export */ });\n/**\r\n * @package Linguator\r\n */\n\n// Translations autocomplete input box.\nfunction initMetaboxAutoComplete() {\n  jQuery('.tr_lang').each(function () {\n    var tr_lang = jQuery(this).attr('id').substring(8);\n    var td = jQuery(this).parent().parent().siblings('.lmat-edit-column');\n    jQuery(this).autocomplete({\n      minLength: 0,\n      source: ajaxurl + '?action=lmat_posts_not_translated' + '&post_language=' + jQuery('.post_lang_choice').val() + '&translation_language=' + tr_lang + '&post_type=' + jQuery('#post_type').val() + '&_lmat_nonce=' + jQuery('#_lmat_nonce').val(),\n      select: function select(event, ui) {\n        jQuery('#htr_lang_' + tr_lang).val(ui.item.id);\n        // ui.item.link is built and come from server side and is well escaped when necessary\n        td.html(ui.item.link); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.html\n      }\n    });\n\n    // when the input box is emptied\n    jQuery(this).on('blur', function () {\n      if (!jQuery(this).val()) {\n        jQuery('#htr_lang_' + tr_lang).val(0);\n        // Value is retrieved from HTML already generated server side\n        td.html(td.siblings('.hidden').children().clone()); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.html\n      }\n    });\n  });\n}\n\n//# sourceURL=webpack://linguator-multilingual-ai-translation/./Assets/js/src/lib/metabox-autocomplete.js?\n}")}},__webpack_module_cache__={};function __webpack_require__(e){var n=__webpack_module_cache__[e];if(void 0!==n)return n.exports;var t=__webpack_module_cache__[e]={exports:{}};return __webpack_modules__[e](t,t.exports,__webpack_require__),t.exports}__webpack_require__.d=(e,n)=>{for(var t in n)__webpack_require__.o(n,t)&&!__webpack_require__.o(e,t)&&Object.defineProperty(e,t,{enumerable:!0,get:n[t]})},__webpack_require__.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),__webpack_require__.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})};var __webpack_exports__=__webpack_require__("./Assets/js/src/block-editor.js")})();