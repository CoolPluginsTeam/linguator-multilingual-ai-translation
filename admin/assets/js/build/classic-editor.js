/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./Assets/js/src/classic-editor.js":
/*!*****************************************!*\
  !*** ./Assets/js/src/classic-editor.js ***!
  \*****************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _lib_confirmation_modal_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lib/confirmation-modal.js */ \"./Assets/js/src/lib/confirmation-modal.js\");\n/* harmony import */ var _lib_metabox_autocomplete_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lib/metabox-autocomplete.js */ \"./Assets/js/src/lib/metabox-autocomplete.js\");\n/**\r\n * @package Linguator\r\n */\n\n\n\n\n// tag suggest in metabox\njQuery(function ($) {\n  $.ajaxPrefilter(function (options, originalOptions, jqXHR) {\n    var lang = $('.post_lang_choice').val();\n    if ('string' === typeof options.data && -1 !== options.url.indexOf('action=ajax-tag-search') && lang) {\n      options.data = 'lang=' + lang + '&' + options.data;\n    }\n  });\n});\n\n// overrides tagBox.get\njQuery(function ($) {\n  // overrides function to add the language\n  tagBox.get = function (id) {\n    var tax = id.substr(id.indexOf('-') + 1);\n\n    // add the language in the $_POST variable\n    var data = {\n      action: 'get-tagcloud',\n      lang: $('.post_lang_choice').val(),\n      tax: tax\n    };\n    $.post(ajaxurl, data, function (r, stat) {\n      if (0 == r || 'success' != stat) {\n        r = wpAjax.broken;\n      }\n\n      // @see code from WordPress core https://github.com/WordPress/WordPress/blob/5.2.2/wp-admin/js/tags-box.js#L291\n      // @see wp_generate_tag_cloud function which generate the escaped HTML https://github.com/WordPress/WordPress/blob/a02b5cc2a8eecb8e076fbb7cf4de7bd2ec8a8eb1/wp-includes/category-template.php#L966-L975\n      r = $('<div />').addClass('the-tagcloud').attr('id', 'tagcloud-' + tax).html(r); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.html\n      $('a', r).on('click', function () {\n        tagBox.flushTags($(this).closest('.inside').children('.tagsdiv'), this);\n        return false;\n      });\n      var tagCloud = $('#tagcloud-' + tax);\n      // add an if else condition to allow modifying the tags outputted when switching the language\n      var v = tagCloud.css('display');\n      if (v) {\n        // See the comment above when r variable is created.\n        $('#tagcloud-' + tax).replaceWith(r); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.replaceWith\n        $('#tagcloud-' + tax).css('display', v);\n      } else {\n        // See the comment above when r variable is created.\n        $('#' + id).after(r); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.after\n      }\n    });\n  };\n});\njQuery(function ($) {\n  // collect taxonomies - code partly copied from WordPress\n  var taxonomies = new Array();\n  $('.categorydiv').each(function () {\n    var this_id = $(this).attr('id'),\n      taxonomyParts,\n      taxonomy;\n    taxonomyParts = this_id.split('-');\n    taxonomyParts.shift();\n    taxonomy = taxonomyParts.join('-');\n    taxonomies.push(taxonomy); // store the taxonomy for future use\n\n    // add our hidden field in the new category form - for each hierarchical taxonomy\n    // to set the language when creating a new category\n    // html code inserted come from html code itself.\n    $('#' + taxonomy + '-add-submit').before(\n    // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.before\n    $('<input />').attr('type', 'hidden').attr('id', taxonomy + '-lang').attr('name', 'term_lang_choice').attr('value', $('.post_lang_choice').val()));\n  });\n\n  // Initialize current language to be able to compare if it changes.\n  (0,_lib_confirmation_modal_js__WEBPACK_IMPORTED_MODULE_0__.initializeLanguageOldValue)();\n\n  // ajax for changing the post's language in the languages metabox\n  $('.post_lang_choice').on('change', function (event) {\n    // Initialize the confirmation dialog box.\n    var confirmationModal = (0,_lib_confirmation_modal_js__WEBPACK_IMPORTED_MODULE_0__.initializeConfirmationModal)();\n    var dialog = confirmationModal.dialogContainer;\n    var dialogResult = confirmationModal.dialogResult;\n    // The selected option in the dropdown list.\n    var selectedOption = event.target;\n    if ($(this).data('old-value') !== selectedOption.value && !isEmptyPost()) {\n      dialog.dialog('open');\n    } else {\n      dialogResult = Promise.resolve();\n    }\n    dialogResult.then(function () {\n      var data = {\n        action: 'lmat_post_lang_choice',\n        lang: selectedOption.value,\n        post_type: $('#post_type').val(),\n        taxonomies: taxonomies,\n        post_id: $('#post_ID').val(),\n        _lmat_nonce: $('#_lmat_nonce').val()\n      };\n      $.post(ajaxurl, data, function (response) {\n        // Target a non existing WP HTML id to avoid a conflict with WP ajax requests.\n        var res = wpAjax.parseAjaxResponse(response, 'lmat-ajax-response');\n        $.each(res.responses, function () {\n          switch (this.what) {\n            case 'translations':\n              // translations fields\n              // Data is built and come from server side and is well escaped when necessary\n              $('.translations').html(this.data); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.html\n              (0,_lib_metabox_autocomplete_js__WEBPACK_IMPORTED_MODULE_1__.initMetaboxAutoComplete)();\n              break;\n            case 'taxonomy':\n              // categories metabox for posts\n              var tax = this.data;\n              // @see wp_terms_checklist https://github.com/WordPress/WordPress/blob/5.2.2/wp-admin/includes/template.php#L175\n              // @see https://github.com/WordPress/WordPress/blob/5.2.2/wp-admin/includes/class-walker-category-checklist.php#L89-L111\n              $('#' + tax + 'checklist').html(this.supplemental.all); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.html\n              // @see wp_popular_terms_checklist https://github.com/WordPress/WordPress/blob/5.2.2/wp-admin/includes/template.php#L236\n              $('#' + tax + 'checklist-pop').html(this.supplemental.populars); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.html\n              // @see wp_dropdown_categories https://github.com/WordPress/WordPress/blob/5.5.1/wp-includes/category-template.php#L336\n              // which is called by LMAT_Admin_Classic_Editor::post_lang_choice to generate supplemental.dropdown\n              $('#new' + tax + '_parent').replaceWith(this.supplemental.dropdown); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.replaceWith\n              $('#' + tax + '-lang').val($('.post_lang_choice').val()); // hidden field\n              break;\n            case 'pages':\n              // parent dropdown list for pages\n              // @see wp_dropdown_pages https://github.com/WordPress/WordPress/blob/5.2.2/wp-includes/post-template.php#L1186-L1208\n              // @see https://github.com/WordPress/WordPress/blob/5.2.2/wp-includes/class-walker-page-dropdown.php#L88\n              $('#parent_id').html(this.data); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.html\n              break;\n            case 'flag':\n              // flag in front of the select dropdown\n              // Data is built and come from server side and is well escaped when necessary\n              $('.lmat-select-flag').html(this.data); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.html\n              break;\n            case 'permalink':\n              // Sample permalink\n              var div = $('#edit-slug-box');\n              if ('-1' != this.data && div.children().length) {\n                // @see get_sample_permalink_html https://github.com/WordPress/WordPress/blob/5.2.2/wp-admin/includes/post.php#L1425-L1454\n                div.html(this.data); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.html\n              }\n              break;\n          }\n        });\n\n        // Creates an event once the language has been successfully changed.\n        var onPostLangChoice = new CustomEvent(\"onPostLangChoice\", {\n          detail: {\n            lang: JSON.parse(selectedOption.options[selectedOption.options.selectedIndex].getAttribute('data-lang'))\n          }\n        });\n        document.dispatchEvent(onPostLangChoice);\n      });\n    }, function () {} // Do nothing when promise is rejected by clicking the Cancel dialog button.\n    );\n    function isEmptyPost() {\n      var title = $('input#title').val();\n      var content = $('textarea#content').val();\n      var excerpt = $('textarea#excerpt').val();\n      return !title && !content && !excerpt;\n    }\n  });\n\n  // Listen to `onPostLangChoice` to perform actions after the language has been changed.\n  document.addEventListener('onPostLangChoice', function (e) {\n    // Update the old language with the new one to be able to compare it in the next changing.\n    (0,_lib_confirmation_modal_js__WEBPACK_IMPORTED_MODULE_0__.initializeLanguageOldValue)();\n\n    // Modifies the language in the tag cloud.\n    $('.tagcloud-link').each(function () {\n      var id = $(this).attr('id');\n      tagBox.get(id);\n    });\n\n    // Modifies the text direction.\n    var dir = e.detail.lang.is_rtl ? 'rtl' : 'ltr';\n    $('body').removeClass('lmat-dir-rtl').removeClass('lmat-dir-ltr').addClass('lmat-dir-' + dir);\n    $('#content_ifr').contents().find('html').attr('lang', e.detail.lang.locale).attr('dir', dir);\n    $('#content_ifr').contents().find('body').attr('dir', dir);\n\n    // Refresh media libraries.\n    lmat.media.resetAllAttachmentsCollections();\n  });\n  (0,_lib_metabox_autocomplete_js__WEBPACK_IMPORTED_MODULE_1__.initMetaboxAutoComplete)();\n});\n\n/**\r\n * @since 3.0\r\n *\r\n * @namespace lmat\r\n */\nvar lmat = window.lmat || {};\n\n/**\r\n * @since 3.0\r\n *\r\n * @namespace lmat.media\r\n */\n_.extend(lmat, {\n  media: {}\n});\n\n/**\r\n * @since 3.0\r\n *\r\n * @alias lmat.media\r\n * @memberOf lmat\r\n * @namespace\r\n */\nvar media = _.extend(lmat.media, /** @lends lmat.media.prototype */\n{\n  /**\r\n   * TODO: Find a way to delete references to Attachments collections that are not used anywhere else.\r\n   *\r\n   * @type {wp.media.model.Attachments}\r\n   */\n  attachmentsCollections: [],\n  /**\r\n   * Imitates { @see wp.media.query } but log all Attachments collections created.\r\n   *\r\n   * @param {Object} [props]\r\n   * @return {wp.media.model.Attachments}\r\n   */\n  query: function query(props) {\n    var attachments = lmat.media.query.delegate(props);\n    lmat.media.attachmentsCollections.push(attachments);\n    return attachments;\n  },\n  resetAllAttachmentsCollections: function resetAllAttachmentsCollections() {\n    this.attachmentsCollections.forEach(function (attachmentsCollection) {\n      /**\r\n       * First reset the { @see wp.media.model.Attachments } collection.\r\n       * Then, if it is mirroring a { @see wp.media.model.Query } collection,\r\n       * refresh this one too, so it will fetch new data from the server,\r\n       * and then the wp.media.model.Attachments collection will synchronize with the new data.\r\n       */\n      attachmentsCollection.reset();\n      if (attachmentsCollection.mirroring) {\n        attachmentsCollection.mirroring._hasMore = true;\n        attachmentsCollection.mirroring.reset();\n      }\n    });\n  }\n});\nif ('undefined' !== typeof wp && 'undefined' !== typeof wp.media) {\n  /**\r\n   * @since 3.0\r\n   *\r\n   * @memberOf lmat.media\r\n   */\n  media.query = _.extend(media.query, /** @lends lmat.media.query prototype */\n  {\n    /**\r\n     * @type Function References WordPress { @see wp.media.query } constructor\r\n     */\n    delegate: wp.media.query\n  });\n\n  // Substitute WordPress media query shortcut with our decorated function.\n  wp.media.query = media.query;\n}\n\n//# sourceURL=webpack://linguator-multilingual-ai-translation/./Assets/js/src/classic-editor.js?\n}");

/***/ }),

/***/ "./Assets/js/src/lib/confirmation-modal.js":
/*!*************************************************!*\
  !*** ./Assets/js/src/lib/confirmation-modal.js ***!
  \*************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initializeConfirmationModal: () => (/* binding */ initializeConfirmationModal),\n/* harmony export */   initializeLanguageOldValue: () => (/* binding */ initializeLanguageOldValue)\n/* harmony export */ });\n/**\r\n * @package Linguator\r\n */\n\nvar languagesList = jQuery('.post_lang_choice');\n\n// Dialog box for alerting the user about a risky changing.\nvar initializeConfirmationModal = function initializeConfirmationModal() {\n  // We can't use underscore or lodash in this common code because it depends of the context classic or block editor.\n  // Classic editor underscore is loaded, Block editor lodash is loaded.\n  var __ = wp.i18n.__;\n\n  // Create dialog container.\n  var dialogContainer = jQuery('<div/>', {\n    id: 'lmat-dialog',\n    style: 'display:none;'\n  }).text(__('Are you sure you want to change the language of the current content?', 'linguator-multilingual-ai-translation'));\n\n  // Put it after languages list dropdown.\n  // PHPCS ignore dialogContainer is a new safe HTML code generated above.\n  languagesList.after(dialogContainer); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.after\n\n  var dialogResult = new Promise(function (confirm, cancel) {\n    var confirmDialog = function confirmDialog(what) {\n      // phpcs:ignore PEAR.Functions.FunctionCallSignature.Indent\n      switch (what) {\n        // phpcs:ignore PEAR.Functions.FunctionCallSignature.Indent\n        case 'yes':\n          // Confirm the new language.\n          languagesList.data('old-value', languagesList.children(':selected').first().val());\n          confirm();\n          break;\n        case 'no':\n          // Revert to the old language.\n          languagesList.val(languagesList.data('old-value'));\n          cancel('Cancel');\n          break;\n      }\n      dialogContainer.dialog('close'); // phpcs:ignore PEAR.Functions.FunctionCallSignature.Indent\n    }; // phpcs:ignore PEAR.Functions.FunctionCallSignature.Indent\n\n    // Initialize dialog box in the case a language is selected but not added in the list.\n    var dialogOptions = {\n      autoOpen: false,\n      modal: true,\n      draggable: false,\n      resizable: false,\n      title: __('Change language', 'linguator-multilingual-ai-translation'),\n      minWidth: 600,\n      maxWidth: '100%',\n      open: function open(event, ui) {\n        // Change dialog box position for rtl language\n        if (jQuery('body').hasClass('rtl')) {\n          jQuery(this).parent().css({\n            right: jQuery(this).parent().css('left'),\n            left: 'auto'\n          });\n        }\n      },\n      close: function close(event, ui) {\n        // When we're closing the dialog box we need to cancel the language change as we click on Cancel button.\n        confirmDialog('no');\n      },\n      buttons: [{\n        text: __('OK', 'linguator-multilingual-ai-translation'),\n        click: function click(event) {\n          confirmDialog('yes');\n        }\n      }, {\n        text: __('Cancel', 'linguator-multilingual-ai-translation'),\n        click: function click(event) {\n          confirmDialog('no');\n        }\n      }]\n    };\n\n    // jQuery UI >= 1.12 is available in WP 6.2+ (our minimum version)\n    Object.assign(dialogOptions, {\n      classes: {\n        'ui-dialog': 'lmat-confirmation-modal'\n      }\n    });\n    dialogContainer.dialog(dialogOptions);\n  });\n  return {\n    dialogContainer: dialogContainer,\n    dialogResult: dialogResult\n  };\n};\nvar initializeLanguageOldValue = function initializeLanguageOldValue() {\n  // Keep the old language value to be able to compare to the new one and revert to it if necessary.\n  languagesList.attr('data-old-value', languagesList.children(':selected').first().val());\n};\n\n//# sourceURL=webpack://linguator-multilingual-ai-translation/./Assets/js/src/lib/confirmation-modal.js?\n}");

/***/ }),

/***/ "./Assets/js/src/lib/metabox-autocomplete.js":
/*!***************************************************!*\
  !*** ./Assets/js/src/lib/metabox-autocomplete.js ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("{__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   initMetaboxAutoComplete: () => (/* binding */ initMetaboxAutoComplete)\n/* harmony export */ });\n/**\r\n * @package Linguator\r\n */\n\n// Translations autocomplete input box.\nfunction initMetaboxAutoComplete() {\n  jQuery('.tr_lang').each(function () {\n    var tr_lang = jQuery(this).attr('id').substring(8);\n    var td = jQuery(this).parent().parent().siblings('.lmat-edit-column');\n    jQuery(this).autocomplete({\n      minLength: 0,\n      source: ajaxurl + '?action=lmat_posts_not_translated' + '&post_language=' + jQuery('.post_lang_choice').val() + '&translation_language=' + tr_lang + '&post_type=' + jQuery('#post_type').val() + '&_lmat_nonce=' + jQuery('#_lmat_nonce').val(),\n      select: function select(event, ui) {\n        jQuery('#htr_lang_' + tr_lang).val(ui.item.id);\n        // ui.item.link is built and come from server side and is well escaped when necessary\n        td.html(ui.item.link); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.html\n      }\n    });\n\n    // when the input box is emptied\n    jQuery(this).on('blur', function () {\n      if (!jQuery(this).val()) {\n        jQuery('#htr_lang_' + tr_lang).val(0);\n        // Value is retrieved from HTML already generated server side\n        td.html(td.siblings('.hidden').children().clone()); // phpcs:ignore WordPressVIPMinimum.JS.HTMLExecutingFunctions.html\n      }\n    });\n  });\n}\n\n//# sourceURL=webpack://linguator-multilingual-ai-translation/./Assets/js/src/lib/metabox-autocomplete.js?\n}");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./Assets/js/src/classic-editor.js");
/******/ 	
/******/ })()
;